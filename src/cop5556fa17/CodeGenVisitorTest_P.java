package cop5556fa17;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Method;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556fa17.CodeGenUtils.DynamicClassLoader;
import cop5556fa17.AST.Program;

public class CodeGenVisitorTest_P implements ImageResources{
	
	static boolean doPrint = true;
	static boolean doCreateFile = false;

	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	private boolean devel = false;
	private boolean grade = true;
	

	public static final int Z = 0xFFFFFF;
	

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).name;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws Exception
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		m.invoke(null, passedArgs);	
	}
	
	
	/** Delays for 5 seconds.
	 * May be useful during development to delay closing frames displaying images 
     */
	void sleepFor5() throws Exception {
		Thread.sleep(5000);
	}
	
	/** Blocks program until a key is pressed to the console.
	 * May be useful during development to delay closing frames displaying images
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		int b = System.in.read();	
	}
	
	/**
	 * Used in most test cases.  Change once here to change behavior in all tests.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		sleepFor5();
	}
	
	
	@Test
	/**
	 * Empty program.  Test updated for new logging instructions.
	 * @throws Exception
	 */
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog;
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		assertEquals("",RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	/** The program in our language creates and displays a 512 x 512 image
	 * with all red pixels.  Then it compares that to an image created 
	 * by ImageSupport.makeConstantImage.
	 * 
	 * @throws Exception
	 */
	public void imageGenRed() throws Exception{
		devel = false;
		grade = true;
		String prog = "imageGenRed";
		String input = prog
				+ "\nimage[512,512] g; \n"
				+ "g[[x,y]] = 16711680;"
				+ "g -> SCREEN;\n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);		
		BufferedImage imageRef = ImageSupport.makeConstantImage(0xFF0000, 512, 512);
		BufferedImage image = RuntimeLog.globalImageLog.get(0);
		assertTrue(ImageSupport.compareImages(imageRef, image));
		//keepFrame();	
	}

	@Test
	/**
	 * Creates a default-sized green image.
	 * @throws Exception
	 */
	public void imageGenGreen() throws Exception{
		devel = false;
		grade = true;
		String prog = "imageGenGreen";
		String input = prog
				+ "\nimage g; \n"
				+ "g[[x,y]] = 65280;"
				+ "g -> SCREEN;\n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);		
		BufferedImage imageRef = ImageSupport.makeConstantImage(0x00FF00, 256, 256);
		BufferedImage image = RuntimeLog.globalImageLog.get(0);
		assertTrue(ImageSupport.compareImages(imageRef, image));
		//keepFrame();
	}
	
	@Test
	/** This is the same test case as before, but the assert statement has been updated to reflect the new instructions
	 * for where to put log statements in assignment 6.
	 * 
	 * @throws Exception
	 */
	public void prog1() throws Exception {
		String prog = "prog1";
		String input = prog + "\nint g;\ng = 3;\n int k=g; g -> SCREEN; ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		assertEquals("3;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void prog2() throws Exception {
		String prog = "prog2";
		String input = prog  + "\nboolean g;\ng = true;\ng -> SCREEN;\ng = false;\ng -> SCREEN;";	
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);
		assertEquals("true;false;",RuntimeLog.globalLog.toString() );
	}
	
	@Test
	public void prog3() throws Exception {
		//scan, parse, and type check the program
		String prog = "prog3";
		String input = prog
				+ " boolean g;\n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				+ "int h;\n"
				+ "h <- @ 1;\n"
				+ "h -> SCREEN;";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"true", "55"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		assertEquals("true;55;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void prog4() throws Exception {
		//scan, parse, and type check the program
		String prog = "prog4";
		String input = prog
				+ " boolean g;\n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				+ "int h;\n"
				+ "h <- @ 1;\n"
				+ "h -> SCREEN;\n"
				+ "int k;\n"
				+ "k <- @ 2;\n"
				+ "k -> SCREEN;\n"
				+ "int chosen;"
				+ "chosen = g ? h : k;\n"
				+ "chosen -> SCREEN;"
				;	
		show(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"true", "34", "56"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		assertEquals("true;34;56;34;",RuntimeLog.globalLog.toString());
	}
	

	@Test
	//  reads an image from the filename passed as command line argument and displays it.
	//  Compares the image output (and logged) from our language and compares with the same image read directly from the file.
	public void image1() throws Exception{
		String prog = "image1";
		String input = prog 
				+ "\nimage g; \n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile2}; 
		runCode(prog, bytecode, commandLineArgs);	
		BufferedImage refImage0 = ImageSupport.readFromFile(imageFile2);
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		assertTrue(ImageSupport.compareImages(refImage0, loggedImage0 ));
		keepFrame();	
	}
	

	
	@Test
	/** reads and resizes image with filename taken from command line
	 * 
	 * @throws Exception
	 */
	public void image2() throws Exception{
		devel = false;
		grade = true;
		String prog = "image2";
		String input = prog 
				+ "\nimage[128,128] g; \n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);		
		
		BufferedImage refImage0 = ImageSupport.readImage(imageFile1, 128, 128);
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		assertTrue(ImageSupport.compareImages(refImage0,loggedImage0));
		//keepFrame();
	}
	
	
	@Test
	/** reads and resizes image with filename taken from command line
	 * 
	 * @throws Exception
	 */
	
	
	public void image3() throws Exception{
		devel = false;
		grade = true;
		String prog = "image3";
		String input = prog+"//args: <inputImageURL> <outputImageURL>\nimage[1024,1024] g;"
				+ " \n\nimage[1024,1024] h; "
				+ "\ng <- @ 0;\n file f = @ 1;"
				+ " \ng -> SCREEN;\nh[[r,a]] =  g[r,a];"
				+ "h -> SCREEN; \nh -> f;";
		
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1,imageFile2}; 
		runCode(prog, bytecode, commandLineArgs);	
		
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		ImageSupport.compareImages(loggedImage0,loggedImage1);
		
				
		//keepFrame();
	}
	
	
	@Test
	/** reads and resizes image with filename taken from command line
	 * 
	 * @throws Exception
	 */
	
	
	public void image5() throws Exception{
		devel = false;
		grade = true;
		String prog = "image5";
		String input = prog 
				   + "\nimage[1024,1024] g;" 
				   +"\n\nimage[1024,1024] h;" 
				   +" \ng <- @ 0;"
				   +"\ng -> SCREEN;"
				   +"\nh[[x,y]] = ! g[x,y];"
				   +"h -> SCREEN; \n"
				   ;
		
		byte[] bytecode = genCode(input);	
		//String imageURL = "\"https://westernalaskalcc.org/SiteAssets/SitePages/Western%20Alaska%20LCC/360px-Caught_some_crabs.jpg\"";
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);	
		
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		BufferedImage test = ImageSupport.makeImage(1024, 1024);
		
		
		for(int y = 0; y < 1024; y++) {
            for (int x = 0; x < 1024; x++) {
                //int pixelRef = RuntimeFunctions.cart_y(RuntimeFunctions.polar_r(x, y), RuntimeFunctions.polar_a(x, y)); 
                ImageSupport.setPixel(ImageSupport.getPixel(loggedImage0, x,y)^Integer.MAX_VALUE,test,x,y);
                int pixel1 = ImageSupport.getPixel(test, x, y);
                int pixel2 = ImageSupport.getPixel(loggedImage1, x,y);
                assertEquals(pixel1, pixel2);
            }
        }
		//assertTrue(ImageSupport.compareImages(loggedImage0,loggedImage1));	
		keepFrame();
		//keepFrame();
	
				
		//keepFrame();
	}
	
	
	
	
	
	@Test
	/** reads and resizes image with filename taken from command line
	 * 
	 * @throws Exception
	 */
	
	
	public void image6() throws Exception{
		devel = false;
		grade = true;
		String prog = "image6";
		String input = prog+ "//args: <imageURL>\nimage[1024,1024] g;"
				+ " \n\nimage[1024,1024] h;"
				+ " \ng <- @ 0;\ng -> SCREEN;"
				+ "\nh[[x,y]] = ! g[x,y];"
				+ "h -> SCREEN; \n\nimage[1024,1024] average; "
				+ "\naverage[[x,y]] = h[x,y]*3;"
				+ "average -> SCREEN; \n";
		
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);	
		
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(1);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(2);
		BufferedImage test = ImageSupport.makeImage(1024, 1024);
		
		
		for(int y = 0; y < 1024; y++) {
            for (int x = 0; x < 1024; x++) {
                //int pixelRef = RuntimeFunctions.cart_y(RuntimeFunctions.polar_r(x, y), RuntimeFunctions.polar_a(x, y)); 
                ImageSupport.setPixel(ImageSupport.getPixel(loggedImage0, x,y)*3,test,x,y);
                int pixel1 = ImageSupport.getPixel(test, x, y);
                int pixel2 = ImageSupport.getPixel(loggedImage1, x,y);
                assertEquals(pixel1, pixel2);
            }
        }
				
		keepFrame();
	}
	
	
	@Test
	/** reads and resizes image with filename taken from command line
	 * 
	 * @throws Exception
	 */
	
	
	public void image8() throws Exception{
		devel = false;
		grade = true;
		String prog = "image8";
		String input = prog+ "//args: <imageURL>\nimage[1024,1024] g;"
				+ " \n\nimage[1024,1024] h;"
				+ " \ng <- @ 0;"
				+ "\ng -> SCREEN;"
				+ "\nh[[x,y]] =  Z-g[x,y];"
				+ "h -> SCREEN; \n";
		
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);	
		
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		BufferedImage test = ImageSupport.makeImage(1024, 1024);
		
		
		for(int y = 0; y < 1024; y++) {
            for (int x = 0; x < 1024; x++) {
                ImageSupport.setPixel(16777215-ImageSupport.getPixel(loggedImage0, x,y),test,x,y);
                int pixel1 = ImageSupport.getPixel(test, x, y);
                int pixel2 = ImageSupport.getPixel(loggedImage1, x,y);
                assertEquals(pixel1, pixel2);
            }
        }
				
				
		//keepFrame();
	}
	
	
	
	@Test
	/** reads and resizes image with filename taken from command line
	 * 
	 * @throws Exception
	 */
	
	
	public void image9() throws Exception{
		devel = false;
		grade = true;
		String prog = "image9";
		String input = prog+  "//args: <imageURL>\nimage[1024,1024] g;"
				+ " \n\nimage[1024,1024] h; "
				+ "\ng <- @ 0;\ng -> SCREEN;"
				+ "\nh[[x,y]] =  (g[x,y] > Z/2) ? Z-g[x,y] : g[x,y];"
				+ "h -> SCREEN; \n";
		
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);			
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		BufferedImage test = ImageSupport.makeImage(1024, 1024);
		
		
		for(int y = 0; y < 1024; y++) {
            for (int x = 0; x < 1024; x++) {
            	int pixel=ImageSupport.getPixel(loggedImage0, x,y);
            	int pixelref=pixel>(16777215/2)?(16777215-pixel):pixel;
                ImageSupport.setPixel(pixelref,test,x,y);
                int pixel1 = ImageSupport.getPixel(test, x, y);
                int pixel2 = ImageSupport.getPixel(loggedImage1, x,y);
                assertEquals(pixel1, pixel2);
            }
        }
				
				
		//keepFrame();
	}
	
	
	
	
	@Test
	/** reads and resizes image with filename taken from command line
	 * 
	 * @throws Exception
	 */
	
	
	public void image10() throws Exception{
		devel = false;
		grade = true;
		String prog = "image10";
		String input = prog+  "//args: <imageURL>\nimage[1024,1024] g;"
				+ " \n\nimage[1024,1024] h;"
				+ " \ng <- @ 0;\ng -> SCREEN;"
				+ "\nh[[x,y]] =  g[x,Y-y];"
				+ "h -> SCREEN; \n";
		
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);	
		
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		BufferedImage test = ImageSupport.makeImage(1024, 1024);
		int Y=ImageSupport.getY(loggedImage0);
		
		for(int y = 0; y < 1024; y++) {
            for (int x = 0; x < 1024; x++) {
            	int pixel=ImageSupport.getPixel(loggedImage0, x,Y-y);
                ImageSupport.setPixel(pixel,test,x,y);
                int pixel1 = ImageSupport.getPixel(test, x, y);
                int pixel2 = ImageSupport.getPixel(loggedImage1, x,y);
                assertEquals(pixel1, pixel2);
            }
        }
				
	
				
		keepFrame();
	}
	
	
	

	
	
    @Test
	public void imagePreDef1() throws Exception{
		devel = false;
		grade = true;
		String prog = "imagePreDef";
		String input = prog
				+ "\nimage[1024,1024] g; \ng[[r,a]] = cart_x[r,a]; \ng -> SCREEN;\n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageURL1}; 
		runCode(prog, bytecode, commandLineArgs);	
		System.out.println(RuntimeLog.getGlobalString());
		BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
		for(int y = 0; y < 1024; y++) {
			for (int x = 0; x < 1024; x++) {
				
				int pixelRef = RuntimeFunctions.cart_x(RuntimeFunctions.polar_r(x, y),
						RuntimeFunctions.polar_a(x, y));
				int pixel = ImageSupport.getPixel(loggedImage, x,y);
				assertEquals(pixelRef, pixel);
				
			}
		}
		keepFrame();
		
	}
    
	@Test
	public void imageGen3() throws Exception{
		devel = false;
		grade = true;
		String prog = "imageGen3";
		String input = prog
				+ "\nimage[1024,512] g; \n"
				+ "g[[x,y]] = x*y;"
				+ "g -> SCREEN;\n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);	

		BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
		for(int y = 0; y < 512; y++) {
			for (int x = 0; x < 1024; x++) {
				int pixelRef =x*y; 
				int pixel = ImageSupport.getPixel(loggedImage, x,y);
				assertEquals(pixelRef, pixel);
			}
		}
		
		//keepFrame();
	}
	
	@Test
	public void imageGen4() throws Exception{
		devel = false;
		grade = true;
		String prog = "imageGen4";
		String input = prog
				+ "\nimage[1024,1024] g; \n"
				+ "g[[r,a]] = r;"
				+ "g -> SCREEN;\n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);	
		
		BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
		for(int y = 0; y < 1024; y++) {
			for (int x = 0; x < 1024; x++) {
				int pixelRef = RuntimeFunctions.polar_r(x, y); 
				int pixel = ImageSupport.getPixel(loggedImage, x,y);
				assertEquals(pixelRef, pixel);
			}
		}
		//keepFrame();
		
	}
	

	
	@Test
	public void imageCopy() throws Exception{
		devel = false;
		grade = true;
		String prog = "imageCopy";
		String input = prog 
				+ "\nimage[1024,1024] g; \n"
				+ "\nimage[1024,1024] h; \n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				+ "h[[x,y]] =  g[x,y];\n"
				+ "h -> SCREEN; \n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);		
	
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
//        assertTrue(ImageSupport.compareImages(loggedImage0,loggedImage1));	
		
		BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
		for(int y = 0; y < 1024; y++) {
			for (int x = 0; x < 1024; x++) {
				int pixelRef =ImageSupport.getPixel(loggedImage0, x,y);
				int pixel = ImageSupport.getPixel(loggedImage1, x,y);
				assertEquals(pixelRef, pixel);
			}
		}
		
		keepFrame();
	}
	

	
	@Test
	/**
	 * Create a grid with white lines and black background.
	 * @throws Exception
	 */
	public void imageGen7() throws Exception{
		devel = false;
		grade = true;
		String prog = "imageGen7";
		String input = prog
				+ "\nimage[512,512] g; \n"
				+ "g[[x,y]] = (x%20>1)?(y%20>1)? 0 : Z : Z;"
				+ "g -> SCREEN;\n"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 
		runCode(prog, bytecode, commandLineArgs);		
		
		BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
		for(int y = 0; y < 512; y++) {
			for (int x = 0; x < 512; x++) {
				int pixelRef = (x%20>1)?(y%20>1)? 0 : Z : Z; 
				int pixel = ImageSupport.getPixel(loggedImage, x,y);
				assertEquals(pixelRef, pixel);
			}
		}
		//keepFrame();
	}
	
	
	@Test
	public void pixelSelector() throws Exception{
		devel = false;
		grade = true;
		String prog = "imagePS";
		String input = prog
				 	+ "\nimage[1024,1024]g; \n"
	                + "\nimage[1024,1024] h; \n"
	                + "g <- @ 0;\n"
	                + "g -> SCREEN;\n"
	                + "h[[r,a]] =  g[r,a];\n"
	                + "h -> SCREEN; \n";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);		
	
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
//		ImageSupport.compareImages(loggedImage0,loggedImage1);	
		
		
		for(int y = 0; y < 1024; y++) {
			   for (int x = 0; x < 1024; x++) {
			      int x1 = RuntimeFunctions.cart_x(RuntimeFunctions.polar_r(x, y), RuntimeFunctions.polar_a(x, y));
			      int y1 = RuntimeFunctions.cart_y(RuntimeFunctions.polar_r(x, y), RuntimeFunctions.polar_a(x, y));
			      int pixelRef = ImageSupport.getPixel(loggedImage0, x1,y1); 
			      int pixel = ImageSupport.getPixel(loggedImage1, x,y);
			      assertEquals(pixelRef, pixel);
			   }
			}


		
		//keepFrame();
		
	}
	
	
	
	@Test
	public void imageIO1() throws Exception{
		devel = false;
		grade = true;
		String prog = "imageIO1";
		String input = "imageIO1//args: <inputImageFullPath> <outputImageFullPath>"
				+ "\n image g; \n "
				+ "file f = @ 1; \n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				+ "g -> f;\n"
				+ "image h;\n"
				+ "h <- f; \n"
				+ "h -> SCREEN;";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1,imageFile2}; 
		runCode(prog, bytecode, commandLineArgs);	

		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		assertTrue(ImageSupport.compareImages(loggedImage0,loggedImage1));
//		keepFrame();
	}
	
	@Test
	public void imageIO1Test() throws Exception{
		devel = false;
		grade = true;
		String prog = "imageIO1";
		String input = "imageIO1//args: <inputImageFullPath> <outputImageFullPath>"
				+ "\n image g; \n "
				+ "file f = @ 1; \n"
				+ "g <- @ 0;\n"
				+ "g -> SCREEN;\n"
				+ "g -> f;\n";
//				+ "image h;\n"
//				+ "h <- f; \n"
//				+ "h -> SCREEN;";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1,imageFile2}; 
		runCode(prog, bytecode, commandLineArgs);	

//		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
//		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
//		assertTrue(ImageSupport.compareImages(loggedImage0,loggedImage1));
		keepFrame();
	}	
	
	
	@Test
	public void image7() throws Exception{
		devel = false;
		grade = true;
		String prog = "image7";
		String input = prog+"//args: <inputImageURL> <outputImageURL>"
				+ "\nimage[1024,1024] g; \n"
				+ "\nimage[1024,1024] h; "
				+ "\ng <- @ 0;"
				+ "\n file f = @ 1; "
				+ "\ng -> SCREEN;\nh[[r,a]] = g[r,a];"
				+ "h -> SCREEN;"
				+ " \nh -> f;";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1,imageFile2}; 
		runCode(prog, bytecode, commandLineArgs);	

		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		ImageSupport.compareImages(loggedImage0,loggedImage1);
		

		//keepFrame();
	}
	
	
	
	@Test
	public void imagePreDef() throws Exception{
		devel = false;
		grade = true;
		String prog = "imagePreDef";
		String input = "imagePreDef//args: <imageURL>"
				+ "\nimage g; \n"
				+ "g[[r,a]] = cart_x[r,a]; \n"
				+ "g -> SCREEN;\n";
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);	

		BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
		for(int y = 0; y < 256; y++) {
			for (int x = 0; x < 256; x++) {
				int a=RuntimeFunctions.polar_a(x,y);
				int r=RuntimeFunctions.polar_r(x,y);
				int pixelRef =RuntimeFunctions.cart_x(r,a); 
				int pixel = ImageSupport.getPixel(loggedImage, x, y);
				assertEquals(pixelRef, pixel);
			}
		}
		
		//keepFrame();
	}
	
	

@Test
public void checkConstants() throws Exception{
	String prog = "checkConstants";
	String input = prog + " \n"
			+"int z = Z; z -> SCREEN;\n"
			+"int def_X = DEF_X; def_X -> SCREEN;\n"
			+"int def_Y = DEF_Y; def_Y -> SCREEN;\n"
			;
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; 
	runCode(prog, bytecode, commandLineArgs);	
	System.out.println("Z=" + 0xFFFFFF);
	assertEquals(Z + ";256;256;", RuntimeLog.getGlobalString());
}

@Test
public void imageWrite1() throws Exception{
	devel = false;
	grade = true;
	String prog = "writeImage";
	String input = prog
			+ "\nimage[128,128] g; \n"
			+ "g <- @ 0;\n"
			+ "g -> SCREEN;\n"
			+ "file f3 = \"imageoutput.jpg\";\n"
			+ "g -> f3;\n"
			;
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1};
	runCode(prog, bytecode, commandLineArgs);

	BufferedImage refImage0 = ImageSupport.readImage(imageFile1, 128, 128);
	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
	assertTrue(ImageSupport.compareImages(refImage0,loggedImage0));
	keepFrame();
}

@Test
public void testing31() throws Exception{
	String prog = "checkConstants";
	String input = prog + " \n"
			+ "image[512,512] g;\n"
			+ "g[[r, a]] = cart_x[r, a];\n"
			+ "g -> SCREEN;";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1, imageFile1};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
	for(int y = 0; y < 512; y++) {
		for (int x = 0; x < 512; x++) {
			int r = RuntimeFunctions.polar_r(x, y);
			int a = RuntimeFunctions.polar_a(x, y);
			int pixelRef = RuntimeFunctions.cart_x(r, a);
			int pixel = ImageSupport.getPixel(loggedImage, x,y);
			assertEquals(pixelRef, pixel);
		}
	}
}

@Test
public void testing11() throws Exception{
	String prog = "checkConstants";
	String input = prog + " \n"
			+ "image[128,128] h;\n"
			+ "image[128,128] g;\n"
			+ "h <- @ 0;\n"
			+ "h -> SCREEN;\n"
			+ "g[[r,a]] = h[r, a];\n"
			+ "file f = \"my_creation.jpg\";\n"
			+ "g -> SCREEN;";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage refImage0 = ImageSupport.readImage(imageFile1, 128, 128);
	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
	assertTrue(ImageSupport.compareImages(refImage0,loggedImage0));
	BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
	for(int y = 0; y < 128; y++) {
		for (int x = 0; x < 128; x++) {
			int r = RuntimeFunctions.polar_r(x, y);
			int a = RuntimeFunctions.polar_a(x, y);
			int x_1 = RuntimeFunctions.cart_x(r, a);
			int y_1 = RuntimeFunctions.cart_y(r, a);
			int pixelRef = ImageSupport.getPixel(loggedImage0, x_1, y_1);
			int pixel = ImageSupport.getPixel(loggedImage1, x,y);
			assertEquals(pixelRef, pixel);
		}
	}
	keepFrame();

}

@Test
public void testing2() throws Exception{
	String prog = "checkConstants";
	String input = prog + " \n"
			+ "image[128,128] h;\n"
			+ "image g;\n"
			+ "h <- @ 0;\n"
			+ "g <- @ 1;\n"
			+ "h -> SCREEN;\n"
			+ "g -> SCREEN;";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1, imageFile1};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage refImage0 = ImageSupport.readImage(imageFile1, 128, 128);
	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
	BufferedImage refImage1 = ImageSupport.readImage(imageFile1, null, null);
	BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
	assertTrue(ImageSupport.compareImages(refImage0,loggedImage0));
	assertTrue(ImageSupport.compareImages(refImage1,loggedImage1));
	keepFrame();
}

@Test
public void canvas1() throws Exception{
	devel = false;
	grade = true;
	String prog = "image5";
	String input = prog
			+ "\nimage[1024,1024] g;"
			+"\n\nimage[1024,1024] h;"
			+" \ng <- @ 0;"
			+"\ng -> SCREEN;"
			+"\nh[[x,y]] = ! g[x,y];"
			+"h -> SCREEN; \n"
			;

	byte[] bytecode = genCode(input);
	//String imageURL = "\"https://westernalaskalcc.org/SiteAssets/SitePages/Western%20Alaska%20LCC/360px-Caught_some_crabs.jpg\"";
	String[] commandLineArgs = {imageFile1};
	runCode(prog, bytecode, commandLineArgs);

	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
	BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
	BufferedImage test = ImageSupport.makeImage(1024, 1024);


	for(int y = 0; y < 1024; y++) {
		for (int x = 0; x < 1024; x++) {
			//int pixelRef = RuntimeFunctions.cart_y(RuntimeFunctions.polar_r(x, y), RuntimeFunctions.polar_a(x, y));
			ImageSupport.setPixel(ImageSupport.getPixel(loggedImage0, x,y)^Integer.MAX_VALUE,test,x,y);
			int pixel1 = ImageSupport.getPixel(test, x, y);
			int pixel2 = ImageSupport.getPixel(loggedImage1, x,y);
			assertEquals(pixel1, pixel2);
		}
	}
	//assertTrue(ImageSupport.compareImages(loggedImage0,loggedImage1));
	keepFrame();
	//keepFrame();

}

@Test
public void testingImage7() throws Exception{
	String prog = "testingImage7";
	String input = prog + " \n"
			+ "image[1024,1024] g; \n" +
			"image[1024,1024] h; \n" +
			"g <- @ 0;\n" +
			"file f = @ 1; \n" +
			"g -> SCREEN;\n" +
			"h[[r,a]] = g[r,a];\n" +
			"h -> SCREEN; \n" +
			"h -> f;\n";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1, imageFile2};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage refImage0 = ImageSupport.readImage(imageFile1, 1024, 1024);
	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
	assertTrue(ImageSupport.compareImages(refImage0,loggedImage0));
	BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
	for(int y = 0; y < 1024; y++) {
		for (int x = 0; x < 1024; x++) {
			int r = RuntimeFunctions.polar_r(x, y);
			int a = RuntimeFunctions.polar_a(x, y);
			int x_1 = RuntimeFunctions.cart_x(r, a);
			int y_1 = RuntimeFunctions.cart_y(r, a);
			int pixelRef = ImageSupport.getPixel(loggedImage0, x_1, y_1);
			int pixel = ImageSupport.getPixel(loggedImage1, x,y);
			assertEquals(pixelRef, pixel);
		}
	}
	keepFrame();

}

@Test
public void testingImage8() throws Exception{
	String prog = "testingImage8";
	String input = prog + " \n" +
			"image[1024,1024] g;\n" +
			"image[1024,1024] h;\n" +
			"g <- @ 0;\n" +
			"file f = @ 1;\n" +
			"g -> SCREEN;\n" +
			"h[[r,a]] =  g[r,a];\n" +
			"h -> SCREEN; \n" +
			"h -> f;\n";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1, imageFile2};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
	BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
	for(int y = 0; y < 1024; y++) {
		for (int x = 0; x < 1024; x++) {
			int r = RuntimeFunctions.polar_r(x, y);
			int a = RuntimeFunctions.polar_a(x, y);
			int x1 = RuntimeFunctions.cart_x(r, a);
			int y1 = RuntimeFunctions.cart_y(r, a);
			int pixelRef = ImageSupport.getPixel(loggedImage0, x1, y1);
			int pixel = ImageSupport.getPixel(loggedImage1, x,y);
			assertEquals(pixelRef, pixel);
		}
	}
	keepFrame();

}

@Test
public void testRandom3() throws Exception{
	String prog = "Random3";
	String input = prog + " \n"
			+ "image[256,256] g;\n"
			+ "g[[r, a]] = cart_x[r, a];\n"
			+ "g -> SCREEN;";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
	for(int y = 0; y < 256; y++) {
		for (int x = 0; x < 256; x++) {
			int r = RuntimeFunctions.polar_r(x, y);
			int a = RuntimeFunctions.polar_a(x, y);
			int actualPixel = RuntimeFunctions.cart_x(r, a);
			int expectedPixel = ImageSupport.getPixel(loggedImage, x,y);
			assertEquals(actualPixel, expectedPixel);
		}
	}
}

@Test
public void testRandom4() throws Exception {
	String prog = "Random3";
	String input = prog + " \n" +
			"image[1024,1024] g;\n" +
			"image[1024,1024] h;\n" +
			"g <- @ 0;\n" +
			"g -> SCREEN;\n" +
			"h[[x,y]] =  g[x,Y-y];\n" +
			"h -> SCREEN; \n";

	byte[] bytecode = genCode(input);
	//String[] commandLineArgs = {imageURL1, imageURL1};
	String[] commandLineArgs = {imageFile1, imageURL1};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage h = RuntimeLog.globalImageLog.get(1);
	BufferedImage g = ImageSupport.readImage(imageFile1, 1024, 1024);
	for(int y = 0; y < 1024; y++) {
		for (int x = 0; x < 1024; x++) {
			int pixel = ImageSupport.getPixel(h,x,y);
			int Y = ImageSupport.getY(h);
			int pixelRef = ImageSupport.getPixel(g,x,Y-y);
			assertEquals(pixelRef, pixel);
		}
	}


}

@Test
public void testRandom5() throws Exception {
	String prog = "Random3";
	String input = prog + " \n" +
		//	"imageIO1//args: <inputImageFullPath> <outputImageFullPath>\n" +
			"image g; \n" +
			"file f = @ 1;\n" +
			"g <- @ 0;\n" +
			"g -> SCREEN;\n" +
			"g -> f;\n" +
			"image h;\n" +
			"h <- f; \n" +
			"h -> SCREEN;";

	byte[] bytecode = genCode(input);
	//String[] commandLineArgs = {imageURL1, imageURL1};
	String[] commandLineArgs = {imageFile1, imageFile2};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage h = RuntimeLog.globalImageLog.get(1);
	
	BufferedImage g = ImageSupport.readImage(imageFile1, null, null);
	assertTrue(ImageSupport.compareImages(g, h));
	for(int y = 0; y < g.getHeight(); y++) {
		for (int x = 0; x < g.getWidth(); x++) {
			int pixel = ImageSupport.getPixel(h,x,y);
			int pixelRef = ImageSupport.getPixel(g,x,y);
			assertEquals(pixelRef, pixel);
		}
	}


}

@Test
public void testRandom6() throws Exception {
	String prog = "Random3";
	String input = prog + " \n" +
			//"imageIO2//args: <imageURL>\n" +
			"image g; \n" +
			"file f = \"newImage.jpg\";\n" +
			"g <- @ 0;\n" +
			"g -> SCREEN;\n" +
			"g -> f;\n" +
			"image h;\n" +
			"h <- f;\n" +
			"h -> SCREEN;";

	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageURL1};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage g = RuntimeLog.globalImageLog.get(0);
	int X = ImageSupport.getX(g);
	int Y = ImageSupport.getY(g);
	BufferedImage h = RuntimeLog.globalImageLog.get(1);
	for(int y = 0; y < Y; y++) {
		for (int x = 0; x < X; x++) {
			int pixel = ImageSupport.getPixel(h,x,y);
			int pixelRef = ImageSupport.getPixel(g,x,y);
			assertEquals(pixelRef, pixel);
		}
	}
}

@Test
public void testRandom7() throws Exception {
	String prog = "Random7";
	String input = prog + " \n" +
			"int pixel;\n" +
			"file f = \"ShelterPoint.jpg\";\n" +
			"image img <- f;\n" +
			"pixel = img [8,9];\n" +
			"pixel -> SCREEN;";

	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage img = ImageSupport.readImage("ShelterPoint.jpg", null, null);
	int pixel = ImageSupport.getPixel(img, 8 ,9);

	assertEquals(String.valueOf(pixel)+";", RuntimeLog.globalLog.toString());
}




@Test
public void imageWrite() throws Exception{
	devel = false;
	grade = true;
String prog = "writeImage";
String input = prog
		+ "\nimage g; \n"
		+ "g <- @ 0;\n"
		+ "g -> SCREEN;\n"
		+ "file f3 = \"imageoutput.jpg\";\n"
		+ "g -> f3;\n"
		;
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1};
	runCode(prog, bytecode, commandLineArgs);

//	BufferedImage refImage0 = ImageSupport.readImage(imageFile1, 128, 128);
//	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
//	//assertTrue(ImageSupport.compareImages(refImage0,loggedImage0));
	keepFrame();
}

@Test
public void testing3() throws Exception{
	String prog = "checkConstants";
	String input = prog + " \n"
			+ "image[512,512] g;\n"
			+ "g[[r, a]] = cart_x[r, a];\n"
			+ "g -> SCREEN;";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1, imageFile1};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage loggedImage = RuntimeLog.globalImageLog.get(0);
	for(int y = 0; y < 512; y++) {
		for (int x = 0; x < 512; x++) {
			int r = RuntimeFunctions.polar_r(x, y);
			int a = RuntimeFunctions.polar_a(x, y);
			int pixelRef = RuntimeFunctions.cart_x(r, a);
			int pixel = ImageSupport.getPixel(loggedImage, x,y);
			assertEquals(pixelRef, pixel);
		}
	}
}

@Test
public void testing1() throws Exception{
	String prog = "checkConstants";
	String input = prog + " \n"
			+ "image[128,128] h;\n"
			+ "image[128,128] g;\n"
			+ "h <- @ 0;\n"
			+ "h -> SCREEN;\n"
			+ "g[[r,a]] = h[r/2, a];\n"
			+ "file f = \"my_creation.jpg\";\n"
			+ "g -> SCREEN;";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage refImage0 = ImageSupport.readImage(imageFile1, 128, 128);
	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
	assertTrue(ImageSupport.compareImages(refImage0,loggedImage0));
	BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
	for(int y = 0; y < 128; y++) {
		for (int x = 0; x < 128; x++) {
			int r = RuntimeFunctions.polar_r(x, y);
			int a = RuntimeFunctions.polar_a(x, y);
			int x_1 = RuntimeFunctions.cart_x(r/2, a);
			int y_1 = RuntimeFunctions.cart_y(r/2, a);
			int pixelRef = ImageSupport.getPixel(loggedImage0, x_1, y_1);
			int pixel = ImageSupport.getPixel(loggedImage1, x,y);
			System.out.println("x"+x+",y"+y);
			assertEquals(pixelRef, pixel);
		}
	}
	keepFrame();

}

@Test
public void testing21() throws Exception{
	String prog = "checkConstants";
	String input = prog + " \n"
			+ "image[128,128] h;\n"
			+ "image g;\n"
			+ "h <- @ 0;\n"
			+ "g <- @ 1;\n"
			+ "h -> SCREEN;\n"
			+ "g -> SCREEN;";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {imageFile1, imageFile1};
	runCode(prog, bytecode, commandLineArgs);
	BufferedImage refImage0 = ImageSupport.readImage(imageFile1, 128, 128);
	BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
	BufferedImage refImage1 = ImageSupport.readImage(imageFile1, null, null);
	BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
	assertTrue(ImageSupport.compareImages(refImage0,loggedImage0));
	assertTrue(ImageSupport.compareImages(refImage1,loggedImage1));
	keepFrame();
}
}